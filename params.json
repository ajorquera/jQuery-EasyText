{"name":"EasyText For jQuery","tagline":"","body":"EasyText Plugin for the jQuery Library \r\n=======================================\r\n  \r\n<!---Image-->\r\n![Image.png...](http://static.jortech.com.ve/easyText/image.png)\r\n  \r\nEasyText is a plugin built on top of jQuery. It enhances the behaviour \r\nof the HTML input element of type text. It's inspired by the input in Google \r\nContacts. It is still in beta. \r\n\r\nThis plugin was built using the jQuery UI Widget Factory. For more information\r\n[click here](http://learn.jquery.com/jquery-ui/widget-factory/)\r\n\r\n**Current Version:** 0.1\r\n\r\nFeatures\r\n------------------------------------------------------------------------------\r\n- Auto-resize input.\r\n\r\n- Overall look of the input for intuitive editing.\r\n\r\n- Store all the values the user has typed in for the session or permanently.\r\n\r\n- Ajax capabilities to send requests to a RESTful service, enabling the \r\n  possibility to store the value in a database as soon as the user has typed in \r\n  a value  \r\n\r\nRequirements\r\n--------------------------------------------------------------------------------\r\n- [jQuery](http://jquery.com/) \r\n- [jQuery UI](http://jqueryui.com/) \r\n\r\nBrowser Compatibility\r\n--------------------------------------------------------------------------------\r\nChrome: **```34+```**\r\n\r\nFirefox: **```28+```**\r\n\r\nInternet Explorer &nbsp;&nbsp;&nbsp;&nbsp;**`Not yet tested`**\r\n\r\nSafari &nbsp;&nbsp;&nbsp;&nbsp;**`Not yet tested`**\r\n\r\nOpera &nbsp;&nbsp;&nbsp;&nbsp;**`Not yet tested`**\r\n\r\nUsage \r\n--------------------------------------------------------------------------------\r\n\r\n<!---Code-->\r\n```javascript\r\n$('input[type=\"text\"]').EasyText(attributes);\r\n```\r\n\r\n```attributes``` is an optional javascript object with the parameters explained \r\n                 below:\r\n\r\nAttributes\r\n--------------------------------------------------------------------------------\r\n\r\n- **maxWidth** ```number``` *(Default: 200)* \r\n\r\n    The maximum size in pixels for the input.\r\n\r\n- **minWidth** ```number``` *(Default: 80)* \r\n\r\n    The minimum size for the input.\r\n\r\n- **values** ```array```\r\n\r\n    It is an array containing all the values of the input in the same order the \r\n    user has typed in. The plugin will store all the values, regardless the type \r\n    of storage used. To delete the values, use the public method \r\n    *deleteStorage()*\r\n\r\n- **maxChars** ```number``` *(Default 200)*\r\n\r\n    The maximum amount of characters that are allowed in the input. \r\n\r\n\r\n- **storage** ```string``` *(Default 'array')*\r\n\r\n    It can have 3 different values: \r\n\r\n    1. **array**: it will store all values from the input in an array. \r\n\r\n    2. **localStorage**: it will store all the values in the browser local storage \r\n                       so it can be accessed later\r\n\r\n    3. **ajax**: It uses ajax capabilities to send request to a RESTful service. \r\n               This way,the value can be store in a database behind the scenes.\r\n               For more information about RESTful philosophy see the wiki page \r\n               -> [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer)\r\n\r\n\r\n- **ajaxConfig** \r\n\r\n    Single level object that contains:\r\n\r\n    - **url**:`string` the url where to send the RESTful requests; \r\n             e.g., ```domain/API/```\r\n\r\n    - **id**:`string` The identification string to form the uri; \r\n            e.g., ```domain/API/id```\r\n\r\n    - **GETCallback**:`function` it process the GET request response. \r\n                     This function corresponds to the success parameter in the \r\n                     $.ajax() method described \r\n                     [here](https://api.jquery.com/jQuery.ajax/). If this \r\n                     parameter is not set, the plugin will not send a GET \r\n                     request when it is instantiated. The parameters are:\r\n                     \r\n        * **data:** ```PlainObject```javaScript object containing zero or more \r\n                    key-value pairs. \r\n                     \r\n        * **status:** ```String``` a string describing the status of the \r\n                      request. More [Info](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).\r\n        * **jqXHR:** ```jqXHR```  a superset of the browser's native \r\n                     XMLHttpRequest object. More [info](http://api.jquery.com/jQuery.ajax/#jqXHR).\r\n\r\n        e.g.\r\n        ```javascript\r\n        function callback(data,status,jqXHR) {\r\n            //code...\r\n        }\r\n        ```\r\n\r\n\r\n    - **UPDATETemplate**: `string` string using John's Resig javascript \r\n                    [Micro-Templating](http://ejohn.org/blog/javascript-micro-templating/) \r\n                    function. Using this templating system, allows to transfer \r\n                    any information using any type of format like for example \r\n                    JSON,XML,YAML,etc. For refering to the input's value, in the \r\n                    string should be a value key that will be replace with actual\r\n                    value. e.g. \"<%= value %>\"\r\n\r\n    - **UPDATEData**: ```PlainObject``` javaScript object containing zero or \r\n                      more key-value pairs. \r\n                      It will contain all the parameters for the UPDATETemplate. \r\n                      For each request, the object will contain the actual value\r\n                      of the input in the form \" value: 'string' \"\r\n                    \r\nMethods\r\n--------------------------------------------------------------------------------\r\n- **getNextBackValue:**\r\ngets the previous or the next value of all the values that have been store in \r\nthe values attribute. Has a direction parameter that acts like a flag. If it is \r\ntrue it will get the next value otherwise the previous one. Return -1 if it gets\r\nto the extreme of the array.\r\n\r\n- **deleteStorage**\r\nIt will delete all the saved values. It will have different behaviours depending \r\non the type of storage.\r\n    - **array**: it will delete the values store in the values attribute.\r\n    - **localStorage**: it will delete the information store in the browser's local storage\r\n    - **ajax**: it will send a delete request to the RESTful service.\r\n\r\n####Method Invocation\r\n \r\nBecause the plugin uses the jQuery UI Widget Factory, there are two especific \r\nways of calling the public methods. More\r\n[information](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/). \r\n\r\n#####Plugin Invocation\r\nTo invoke a method using the widget's plugin, pass the name of the method as a \r\nstring. If the method requires arguments, pass them as additional parameters \r\nto the plugin.\r\n\r\n```javascript\r\n$('input[type=\"text\"]').easyText('getNextBackValue','true')\r\n```\r\n\r\n#####Instance Invocation\r\nUnder the hoods, every instance of every widget is stored on the element using \r\n[jQuery.data()](http://api.jquery.com/jQuery.data/). To retrieve the instance \r\nobject, call jQuery.data() using the \r\nwidget's full name \"easyInputEasyText\".\r\n\r\n```javascript\r\nvar jQueryObject = $('input[type=\"text\"]').easyText();\r\n\r\nvar easyText = jQueryObject.data('easyInputEasyText');\r\n\r\neasyText.deleteStorage();\r\n\r\n```\r\n\r\nDemo\r\n--------------------------------------------------------------------------------\r\nYou can see an example in the following \r\n[link](http://static.jortech.com.ve/easyText/jQuery/demo/).\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}